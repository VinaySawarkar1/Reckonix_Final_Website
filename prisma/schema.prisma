generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String
  role     String @default("admin")
}

model Product {
  id                Int            @id @default(autoincrement())
  name              String
  category          String
  subcategory       String?
  shortDescription  String?
  imageUrl          String?
  rank              Int?
  applications      String?
  catalogPdfUrl     String?
  certifications    String?
  createdAt         DateTime?      @default(now())
  datasheetPdfUrl   String?
  featuresBenefits  String?
  fullTechnicalInfo String?
  homeFeatured      Boolean?       @default(false)
  imageGallery      String?
  specifications    String?
  technicalDetails  String?
  views             Int?           @default(0)
  images            ProductImage[]
  productViews      ProductView[]
}

model Category {
  id            Int           @id @default(autoincrement())
  name          String
  subcategories Subcategory[]
}

model Subcategory {
  id         Int           @id @default(autoincrement())
  name       String
  categoryId Int
  parentId   Int?
  category   Category      @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  parent     Subcategory?  @relation("SubcategoryParent", fields: [parentId], references: [id])
  children   Subcategory[] @relation("SubcategoryParent")
}

model Customer {
  id          Int       @id @default(autoincrement())
  name        String
  logoUrl     String?
  category    String?
  description String?
  website     String?
  featured    Boolean?  @default(false)
  location    String?
  industryId  Int?
  industry    Industry? @relation(fields: [industryId], references: [id])
}

model QuoteRequest {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  company   String?
  phone     String?
  message   String
  status    String   @default("pending")
  createdAt DateTime @default(now())
  products  String?
}

model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  subject   String
  message   String
  replied   Boolean  @default(false)
  createdAt DateTime @default(now())
}

model WebsiteView {
  id        Int      @id @default(autoincrement())
  ip        String
  createdAt DateTime @default(now())
}

model ProductView {
  id        Int     @id @default(autoincrement())
  productId Int
  views     Int     @default(0)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model CompanyEvent {
  id              Int      @id @default(autoincrement())
  title           String
  description     String
  eventDate       DateTime
  imageUrl        String?
  createdAt       DateTime @default(now())
  published       Boolean  @default(false)
  attendees       String?
  content         String?
  duration        String?
  featured        Boolean  @default(false)
  location        String?
  registrationUrl String?
  slug            String?  @unique
  tags            String?
}

model MainCatalog {
  id          Int      @id @default(autoincrement())
  title       String
  description String?
  pdfUrl      String
  createdAt   DateTime @default(now())
}

model Job {
  id           Int              @id @default(autoincrement())
  title        String
  description  String
  requirements String
  location     String
  type         String
  salary       String?
  createdAt    DateTime         @default(now())
  experience   String
  applications JobApplication[]
}

model JobApplication {
  id         Int      @id @default(autoincrement())
  name       String
  email      String
  location   String
  experience String
  resumeUrl  String
  jobId      Int
  jobTitle   String
  createdAt  DateTime @default(now())
  job        Job      @relation(fields: [jobId], references: [id], onDelete: Cascade)
}

model GalleryImage {
  id         Int      @id @default(autoincrement())
  section    String
  url        String
  uploadedAt DateTime @default(now())
}

model ProductImage {
  id         Int      @id @default(autoincrement())
  productId  Int
  url        String
  uploadedAt DateTime @default(now())
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model TeamMember {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  bio       String?
  photoUrl  String?
  createdAt DateTime @default(now())
}

model Industry {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  description String
  icon        String
  rank        Int        @default(0)
  createdAt   DateTime   @default(now())
  customers   Customer[]
}

model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  company   String
  content   String
  rating    Int      @default(5)
  featured  Boolean  @default(false)
  createdAt DateTime @default(now())
}
